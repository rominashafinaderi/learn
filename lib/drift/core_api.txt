/////////select


در Drift برای اجرای دستورات SELECT و دریافت داده از پایگاه داده، روش‌های مختلفی وجود دارد که در ادامه آن‌ها را ساده و گام‌به‌گام توضیح می‌دهم.

۱. دریافت تمام داده‌ها از یک جدول
برای دریافت همه سطرهای یک جدول، از select(table).get() استفاده می‌کنیم.

Future<List<TodoItem>> get allTodoItems => select(todoItems).get();
این تابع لیستی از تمام آیتم‌های موجود در جدول todoItems را برمی‌گرداند.
۲. دریافت داده‌های خاص با فیلتر (WHERE)
می‌توانیم از where برای فیلتر کردن داده‌ها استفاده کنیم.

مثال ۱: دریافت تمام تسک‌های مربوط به یک دسته خاص

Stream<List<TodoItem>> watchEntriesInCategory(Category c) {
  return (select(todoItems)..where((t) => t.category.equals(c.id))).watch();
}
🔹 این کد همه‌ی تسک‌های مربوط به یک دسته‌ی خاص را پیدا کرده و در صورت تغییر داده‌ها، به‌روز می‌شود.

مثال ۲: دریافت تسک‌هایی که طول عنوانشان بیشتر از ۱۵ کاراکتر است

Stream<List<TodoItem>> contentWithLongTitles() {
  final query = select(todoItems)
    ..where((t) => t.title.length.isBiggerOrEqualValue(16));

  return query.map((row) => row.content).watch();
}
🔹 در اینجا عنوان‌های بلندتر از ۱۵ کاراکتر فیلتر شده و محتوای آن‌ها برگردانده می‌شود.

۳. محدود کردن تعداد نتایج (LIMIT)
اگر بخواهیم تعداد نتایج را محدود کنیم، از limit استفاده می‌کنیم.

Future<List<TodoItem>> limitTodos(int limit, {int? offset}) {
  return (select(todoItems)..limit(limit, offset: offset)).get();
}
🔹 این تابع فقط تعداد مشخصی از نتایج را برمی‌گرداند.

۴. مرتب‌سازی نتایج (ORDER BY)
می‌توانیم داده‌ها را به ترتیب صعودی یا نزولی مرتب کنیم.

مثال: مرتب‌سازی تسک‌ها بر اساس عنوان

Future<List<TodoItem>> sortEntriesAlphabetically() {
  return (select(todoItems)
        ..orderBy([(t) => OrderingTerm(expression: t.title)]))
      .get();
}
🔹 این کوئری تسک‌ها را بر اساس عنوان، به ترتیب الفبایی مرتب می‌کند.

اگر بخواهیم به ترتیب نزولی (برعکس) مرتب کنیم:

..orderBy([(t) => OrderingTerm(expression: t.title, mode: OrderingMode.desc)])
۵. دریافت مقدار خاص
(getSingle)

اگر بدانیم که یک کوئری فقط یک مقدار را برمی‌گرداند، می‌توانیم از getSingle استفاده کنیم.

مثال: دریافت تسک بر اساس ID

Stream<TodoItem> entryById(int id) {
  return (select(todoItems)..where((t) => t.id.equals(id))).watchSingle();
}
🔹 این کوئری یک تسک خاص را بر اساس ID دریافت می‌کند و اگر تغییری در داده رخ دهد، مقدار جدید ارسال می‌شود.
۶. ترکیب get و watch برای انعطاف بیشتر
گاهی نیاز داریم که خروجی را به صورت Future یا Stream در اختیار داشته باشیم.

MultiSelectable<TodoItem> pageOfTodos(int page, {int pageSize = 10}) {
  return select(todoItems)..limit(pageSize, offset: page);
}
🔹 این تابع داده‌ها را صفحه‌بندی می‌کند و هم امکان دریافت Future<List<TodoItem>> دارد و هم Stream<List<TodoItem>>.

جمع‌بندی
✔ get() → دریافت یک‌باره‌ی لیست داده‌ها
✔ watch() → دریافت داده‌ها به صورت جریان (Stream) که با تغییر داده‌ها، به‌روز می‌شود
✔ where() → فیلتر کردن داده‌ها
✔ limit() → محدود کردن تعداد نتایج
✔ orderBy() → مرتب‌سازی نتایج
✔ getSingle() → دریافت یک مقدار خاص بدون نیاز به لیست

/////join


آموزش ساده‌ی Joins در Drift
در Drift، Joins به ما کمک می‌کند تا داده‌های چند جدول را ترکیب کنیم و از آن‌ها در کوئری‌های خود استفاده کنیم. در ادامه، این مفاهیم را به زبان ساده توضیح می‌دهم.

۱. Inner Join و Left Outer Join چیه؟
وقتی دو جدول داریم و می‌خواهیم اطلاعات آن‌ها را ترکیب کنیم، از Join استفاده می‌کنیم.

Inner Join: فقط رکوردهایی که در هر دو جدول مقدار مشترک دارند، نمایش داده می‌شوند.
Left Outer Join: تمام رکوردهای جدول سمت چپ نمایش داده می‌شوند، حتی اگر در جدول سمت راست مقدار مرتبطی وجود نداشته باشد.
مثال: نمایش لیست وظایف (Todos) همراه با دسته‌بندی‌هایشان
فرض کن که دو جدول داریم:

todoItems (لیست وظایف)
categories (دسته‌بندی‌ها)
یک وظیفه (todoItem) می‌تواند به یک دسته‌بندی (category) مرتبط باشد. اگر بخواهیم همه‌ی وظایف را همراه با دسته‌بندی‌هایشان نمایش دهیم، این کار را انجام می‌دهیم:

Stream<List<EntryWithCategory>> entriesWithCategory() {
  final query = select(todoItems).join([
    leftOuterJoin(categories, categories.id.equalsExp(todoItems.category)),
  ]);
  return query.watch().map((rows) {
    return rows.map((row) {
      return EntryWithCategory(
        row.readTable(todoItems), // خواندن وظیفه
        row.readTableOrNull(categories), // خواندن دسته‌بندی (ممکن است مقدار نداشته باشد)
      );
    }).toList();
  });
}
📌 در اینجا از leftOuterJoin استفاده کرده‌ایم تا همه‌ی وظایف نمایش داده شوند، حتی اگر دسته‌بندی نداشته باشند.

۲. استفاده از Alias برای نام‌گذاری جداول
گاهی لازم است که یک جدول را دو بار در یک کوئری استفاده کنیم. در این حالت از Alias استفاده می‌کنیم.

مثال: نمایش مسیرها (routes) با نقاط شروع (start) و پایان (destination)

final start = alias(geoPoints, 's');
final destination = alias(geoPoints, 'd');

final rows = await select(routes).join([
  innerJoin(start, start.id.equalsExp(routes.start)),
  innerJoin(destination, destination.id.equalsExp(routes.destination)),
]).get();

return rows.map((row) {
  return RouteWithPoints(
    route: row.readTable(routes),
    start: row.readTable(start),
    destination: row.readTable(destination),
  );
}).toList();
📌 در اینجا از alias استفاده کرده‌ایم تا دو بار از جدول geoPoints استفاده کنیم، یکی برای نقطه‌ی شروع (s) و یکی برای نقطه‌ی پایان (d).

۳. مرتب‌سازی (ORDER BY) و فیلترگذاری (WHERE) روی Join
می‌توانیم نتایج را بر اساس شرط‌های خاصی فیلتر کنیم یا آن‌ها را مرتب‌سازی کنیم.

مثال: نمایش وظایف فقط اگر محتوای آن‌ها شامل یک متن خاص باشد

Stream<List<EntryWithCategory>> entriesWithCategory(String entryFilter) {
  final query = select(todoItems).join([
    leftOuterJoin(categories, categories.id.equalsExp(todoItems.category)),
  ]);

  query.where(todoItems.content.like(entryFilter)); // فیلترگذاری
  query.orderBy([OrderingTerm.asc(categories.id)]); // مرتب‌سازی بر اساس id دسته‌بندی‌ها

  return query.watch().map((rows) {
    return rows.map((row) {
      return EntryWithCategory(
        row.readTable(todoItems),
        row.readTableOrNull(categories),
      );
    }).toList();
  });
}
📌 این کوئری فقط وظایفی را که متنشان شامل entryFilter است، نمایش می‌دهد و نتایج را بر اساس id دسته‌بندی مرتب می‌کند.

۴. شمارش (COUNT) تعداد آیتم‌ها در هر دسته‌بندی
می‌توانیم ببینیم که در هر دسته‌بندی، چند وظیفه وجود دارد.

Future<void> countTodosInCategories() async {
  final amountOfTodos = todoItems.id.count(); // شمارش وظایف

  final query = select(categories).join([
    innerJoin(todoItems, todoItems.category.equalsExp(categories.id), useColumns: false),
  ]);

  query
    ..addColumns([amountOfTodos])
    ..groupBy([categories.id]); // گروه‌بندی بر اساس دسته‌بندی‌ها

  final result = await query.get();

  for (final row in result) {
    print('دسته‌بندی ${row.readTable(categories)} دارای ${row.read(amountOfTodos)} وظیفه است.');
  }
}
📌 در اینجا تعداد وظایف هر دسته‌بندی را محاسبه کرده‌ایم.

۵. محاسبه‌ی میانگین (AVG) طول محتوا
اگر بخواهیم میانگین تعداد کاراکترهای متن وظایف را پیدا کنیم:

Stream<double> averageItemLength() {
  final avgLength = todoItems.content.length.avg();

  final query = selectOnly(todoItems)..addColumns([avgLength]);

  return query.map((row) => row.read(avgLength)!).watchSingle();
}
📌 در اینجا از selectOnly استفاده کرده‌ایم، چون فقط مقدار میانگین را لازم داریم و نمی‌خواهیم کل ستون‌های جدول را دریافت کنیم.

🔥 خلاصه‌ی مهم‌ترین نکات:
✅ Inner Join برای نمایش فقط رکوردهای مرتبط
✅ Left Outer Join برای نمایش تمام رکوردهای جدول اصلی، حتی اگر داده‌ای در جدول مرتبط نباشد
✅ Alias برای نام‌گذاری چند نسخه از یک جدول در کوئری
✅ ORDER BY برای مرتب‌سازی نتایج
✅ WHERE برای فیلتر کردن نتایج
✅ COUNT برای شمارش تعداد رکوردها
✅ AVG برای محاسبه‌ی میانگین


//////Using selects as inserts

   1. استفاده از SELECT به عنوان INSERT
   گاهی اوقات نیاز داریم که داده‌های خروجی یک SELECT را مستقیماً در یک جدول دیگر ذخیره کنیم. این کار با INSERT INTO SELECT انجام می‌شود.

   🔹 مثال واقعی:
   فرض کن توی اپلیکیشن «مدیریت کارها» (To-Do App)، بعضی از تسک‌ها (کارها) بدون دسته‌بندی هستند. حالا می‌خواهیم برای آن‌ها یک دسته‌بندی جدید ایجاد کنیم، مثلا: «دسته‌بندی برای: [نام کار]»
   در Drift این کار با insertFromSelect انجام می‌شود:

   Future<void> createCategoryForUnassignedTodoEntries() async {
     final newDescription = Variable<String>('دسته‌بندی برای: ') + todoItems.title;
     final query = selectOnly(todoItems)
       ..where(todoItems.category.isNull()) // فقط تسک‌هایی که دسته‌بندی ندارند
       ..addColumns([newDescription]);

     await into(categories).insertFromSelect(query, columns: {
       categories.name: newDescription,
     });
   }
   📌 چی شد؟

   تسک‌هایی که دسته‌بندی ندارند فیلتر شدند.
   مقدار "دسته‌بندی برای: عنوان تسک" ساخته شد.
   این مقدار به عنوان نام دسته‌بندی جدید در جدول categories ذخیره شد.
   2. زیرپرس‌وجو (Subquery)
   در Drift می‌توانیم از Subquery برای ترکیب چند پرس‌وجو استفاده کنیم.

   🔹 مثال واقعی:
   می‌خواهیم تعداد تسک‌های بلند (مثلاً جزو ۱۰ تسک طولانی‌تر) را برای هر دسته‌بندی حساب کنیم.


   Future<List<(Category, int)>> amountOfLengthyTodoItemsPerCategory() async {
     final longestTodos = Subquery(
       select(todoItems)
         ..orderBy([(row) => OrderingTerm.desc(row.title.length)]) // مرتب‌سازی بر اساس طول عنوان
         ..limit(10), // فقط 10 تا از بلندترین تسک‌ها
       's',
     );

     final itemCount = longestTodos.ref(todoItems.title).count();
     final query = select(categories).join(
       [
         innerJoin(
           longestTodos,
           longestTodos.ref(todoItems.category).equalsExp(categories.id),
           useColumns: false,
         )
       ],
     )
       ..addColumns([itemCount])
       ..groupBy([categories.id]);

     final rows = await query.get();

     return [
       for (final row in rows) (row.readTable(categories), row.read(itemCount)!),
     ];
   }
   📌 چی شد؟

   یک Subquery تعریف شد که ۱۰ تسک بلندتر را انتخاب کند.
   در یک JOIN بررسی کردیم که هر کدام از این تسک‌ها مربوط به چه دسته‌ای هستند.
   تعداد این تسک‌های بلند را برای هر دسته محاسبه کردیم.
   3. پشتیبانی از JSON در Drift
   گاهی اوقات داده‌هایی داریم که ساختار مشخصی ندارند، مثلاً یک مخاطب (Contact) می‌تواند چندین شماره تلفن داشته باشد. برای این کار می‌توانیم از ستون JSON استفاده کنیم.

   🔹 مثال واقعی:
   اگر در دیتابیس اپلیکیشن مدیریت مخاطبین (Contacts) می‌خواهیم نام و شماره تلفن‌های هر مخاطب را ذخیره کنیم، می‌توانیم به این شکل عمل کنیم:

   class _ContactsConverter extends TypeConverter<ContactData, String> {
     @override
     ContactData fromSql(String fromDb) {
       return ContactData.fromJson(json.decode(fromDb) as Map<String, Object?>);
     }

     @override
     String toSql(ContactData value) {
       return json.encode(value.toJson());
     }
   }

   class Contacts extends Table {
     IntColumn get id => integer().autoIncrement()();
     TextColumn get data => text().map(_ContactsConverter())();

     TextColumn get name => text().generatedAs(data.jsonExtract(r'$.name'))();
   }
   📌 چی شد؟

   data یک ستون متنی است که اطلاعات مخاطب را به صورت JSON ذخیره می‌کند.
   مقدار name مستقیماً از JSON استخراج می‌شود.
   ✅ حالا فرض کنیم بخواهیم تماس‌هایی که یک شماره خاص دارند را به نام مخاطب مربوطه وصل کنیم:

   Future<List<(Call, Contact)>> callsWithContact() async {
     final phoneNumbersForContact =
         contacts.data.jsonEach(this, r'$.phoneNumbers');
     final phoneNumberQuery = selectOnly(phoneNumbersForContact)
       ..addColumns([phoneNumbersForContact.value]);

     final query = select(calls).join(
         [innerJoin(contacts, calls.phoneNumber.isInQuery(phoneNumberQuery))]);

     return query
         .map((row) => (row.readTable(calls), row.readTable(contacts)))
         .get();
   }
   📌 چی شد؟

   ستون phoneNumbers که یک آرایه در JSON است را گسترش دادیم.
   بررسی کردیم که آیا شماره تلفن هر تماس در این آرایه وجود دارد یا نه.
   4. SELECT بدون جدول
   گاهی اوقات نیاز داریم فقط یک مقدار را از دیتابیس بخوانیم، بدون این که روی هیچ جدولی کار کنیم.

   🔹 مثال واقعی:
   می‌خواهیم بررسی کنیم که آیا تسکی در دیتابیس وجود دارد یا نه؟

   Future<bool> hasTodoItem() async {
     final todoItemExists = existsQuery(select(todoItems));
     final row = await selectExpressions([todoItemExists]).getSingle();
     return row.read(todoItemExists)!;
   }
   📌 چی شد؟

   بررسی کردیم که آیا رکوردی در todoItems هست یا نه.
   مقدار true یا false برمی‌گردد.
   5. عملیات‌های ترکیبی (Compound Selects)
   در Drift می‌توانیم چندین SELECT را ترکیب کنیم، مثل:

   UNION ALL → ادغام بدون حذف موارد تکراری
   UNION → ادغام و حذف موارد تکراری
   EXCEPT → نمایش داده‌های کوئری اول که در دومی نیستند
   INTERSECT → نمایش داده‌های مشترک دو کوئری
   🔹 مثال واقعی:
   فرض کن می‌خواهیم بدانیم چند تسک در هر دسته‌بندی هست، به‌علاوه تعداد تسک‌هایی که دسته‌بندی ندارند؟

   Future<List<(String?, int)>> todoItemsInCategory() async {
     final countWithCategory = subqueryExpression<int>(selectOnly(todoItems)
       ..addColumns([countAll()])
       ..where(todoItems.category.equalsExp(categories.id)));

     final countWithoutCategory = subqueryExpression<int>(selectOnly(todoItems)
       ..addColumns([countAll()])
       ..where(todoItems.category.isNull()));

     final query = db.selectOnly(categories)
       ..addColumns([categories.name, countWithoutCategory])
       ..groupBy([categories.id]);

     query.unionAll(db.selectExpressions(
         [const Constant<String>(null), countWithoutCategory]));

     return query
         .map((row) => (row.read(categories.name), row.read(countWithCategory)!))
         .get();
   }
   📌 چی شد؟

   تعداد تسک‌های هر دسته‌بندی را محاسبه کردیم.
   تسک‌های بدون دسته‌بندی را هم جداگانه حساب کردیم.
   دو نتیجه را با UNION ALL ترکیب کردیم.
   ✅ حالا با این مفاهیم در Drift راحت‌تر کار خواهی کرد. هر سوالی داشتی بپرس! 😃


  ///////////////////    <(Category, int)>این چیه
 در واقع یک تاپل (Tuple) در Dart است که شامل دو مقدار است:

   Category → یک آبجکت از نوع دسته‌بندی (Category)
   int → یک مقدار عدد صحیح (تعداد آیتم‌ها در آن دسته‌بندی)
   چرا از Tuple استفاده می‌کنیم؟
   در Drift و به‌طور کلی در Dart، وقتی از select استفاده می‌کنیم و می‌خواهیم چند مقدار را از دیتابیس بخوانیم، می‌توانیم از تاپل‌ها برای ذخیره داده‌های ترکیبی استفاده کنیم.

   مثال:
   فرض کن که یک اپلیکیشن مدیریت کارها (To-Do List) داریم و هر تسک (Task) می‌تواند یک دسته‌بندی (Category) داشته باشد. حالا می‌خواهیم تعداد تسک‌های هر دسته‌بندی را حساب کنیم.

   کد زیر در Drift این کار را انجام می‌دهد:


   Future<List<(Category, int)>> amountOfTasksPerCategory() async {
     final itemCount = todoItems.id.count(); // شمارش تعداد تسک‌ها
     final query = select(categories).join([
       leftOuterJoin(todoItems, todoItems.category.equalsExp(categories.id)),
     ])
       ..addColumns([itemCount])
       ..groupBy([categories.id]);

     final rows = await query.get();

     return [
       for (final row in rows) (row.readTable(categories), row.read(itemCount)!),
     ];
   }
   تحلیل کد بالا:
   یک کوئری نوشتیم که تعداد تسک‌های هر دسته را بشمارد.
   از JOIN استفاده کردیم تا بین جدول todoItems و categories ارتباط برقرار کنیم.
   مقدار itemCount (تعداد تسک‌های هر دسته) را اضافه کردیم.
   نتیجه را در قالب List<(Category, int)> برگرداندیم.
   نتیجه در عمل:
   فرض کن در دیتابیس این دسته‌بندی‌ها و تسک‌ها را داشته باشیم:

   دسته‌بندی	تعداد تسک‌ها
   کارهای روزانه	5
   خریدها	3
   مطالعه	2
   🔹 مقدار خروجی amountOfTasksPerCategory() این خواهد بود:

   [
     (Category(name: "کارهای روزانه"), 5),
     (Category(name: "خریدها"), 3),
     (Category(name: "مطالعه"), 2),
   ]
   ✅ خلاصه: <(Category, int)> یعنی ما دو مقدار داریم:

   Category (اطلاعات دسته‌بندی)
   int (تعداد تسک‌های مربوط به آن دسته‌بندی)






///////////////////////////////////////Writes (update, insert, delete)



در اینجا چند عملیات پایه‌ای در Drift (که برای مدیریت دیتابیس در فلاتر استفاده می‌شود) برای به‌روزرسانی (update)، درج (insert) و حذف (delete) داده‌ها آورده شده است. من این‌ها را به صورت ساده توضیح می‌دهم:

1. به‌روزرسانی داده‌ها (Update)
برای به‌روزرسانی یک یا چند ردیف در دیتابیس، می‌توانیم از متد update استفاده کنیم. گاهی اوقات می‌خواهیم فقط برخی از فیلدها را تغییر دهیم. برای این کار از Companion استفاده می‌کنیم.

مثال 1: به‌روزرسانی دسته‌بندی تسک‌ها
Future move(cate c){
return update(todos)..where((t)=>t.title.like(%sd%))).write(Todoescampaign(cate:Value(ta;
}

Future moveImportantTasksIntoCategory(Category target) {
  return (update(todos)
      ..where((t) => t.title.like('%Important%'))  // انتخاب تسک‌هایی که در عنوانشان "Important" وجود دارد
  ).write(TodosCompanion(
    category: Value(target.id),  // فقط فیلد "category" را به دسته‌بندی هدف تغییر می‌دهیم
  ));
}
در اینجا:

TodosCompanion برای به‌روزرسانی فیلدهای خاص (مثل category) استفاده می‌شود.
Value(target.id) نشان می‌دهد که فیلد category به شناسه دسته‌بندی هدف تغییر خواهد کرد.
مثال 2: به‌روزرسانی تمام فیلدهای یک تسک

Future updateTodo(Todo entry) {
  return update(todos).replace(entry);  // جایگزینی تمام فیلدهای تسک با مقادیر جدید
}
در اینجا:

replace تمام فیلدها را به مقادیر جدید موجود در entry به‌روزرسانی می‌کند.
2. حذف داده‌ها (Delete)
برای حذف داده‌ها، از متد delete استفاده می‌کنیم.

مثال: حذف تسک‌های قدیمی

Future feelingLazy() {
  return (delete(todos)..where((t) => t.id.isSmallerThanValue(10))).go();
}
در اینجا:

where برای انتخاب تسک‌هایی است که id آن‌ها کوچکتر از 10 است.
go() برای اجرای عملیات حذف استفاده می‌شود.
3. درج داده‌ها (Insert)
برای درج داده‌ها، از متد insert استفاده می‌کنیم.

مثال: درج یک تسک جدید

Future<int> addTodo(TodosCompanion entry) {
  return into(todos).insert(entry);  // درج یک تسک جدید در جدول todos
}
در اینجا:

TodosCompanion برای مشخص کردن فیلدهایی که می‌خواهیم درج کنیم استفاده می‌شود.
درج چندین داده به صورت همزمان (Batch Insert)

Future<void> insertMultipleEntries() async {
  await batch((batch) {
    batch.insertAll(todos, [
      TodosCompanion.insert(title: 'First entry', content: 'My content'),
      TodosCompanion.insert(title: 'Another entry', content: 'More content', category: Value(3)),
    ]);
  });
}
در اینجا:

insertAll برای درج چندین ردیف به صورت همزمان در یک عملیات استفاده می‌شود.
این عملیات در یک batch انجام می‌شود که باعث می‌شود سرعت عملیات بیشتر شود.
4. Upsert (درج یا به‌روزرسانی خودکار)
در نسخه‌های جدید SQLite، Upsert اجازه می‌دهد که اگر ردیفی با کلید اصلی موجود باشد، آن ردیف به‌روزرسانی شود، در غیر این صورت، یک ردیف جدید وارد شود.

مثال: درج یا به‌روزرسانی کاربر

Future<int> createOrUpdateUser(User user) {
  return into(users).insertOnConflictUpdate(user);  // اگر کاربر موجود باشد، اطلاعاتش به‌روزرسانی می‌شود
}
در اینجا:

اگر ایمیل کاربری که وارد می‌شود قبلاً در دیتابیس وجود داشته باشد، نام کاربر به‌روزرسانی می‌شود.
اگر کاربر جدید باشد، یک ردیف جدید برایش درج می‌شود.
5. درج داده با بازگشت داده‌ها (Returning)
در Drift می‌توانید هنگام درج داده، ردیف وارد شده را به صورت مستقیم دریافت کنید.

مثال: دریافت ردیف وارد شده

final row = await into(todos).insertReturning(TodosCompanion.insert(
  title: 'A todo entry',
  content: 'A description',
));
در اینجا:

با insertReturning، ردیف وارد شده را می‌گیریم که شامل شناسه (id) و مقادیر پیش‌فرضی است که برای آن ردیف تنظیم شده‌اند.
خلاصه:
برای به‌روزرسانی داده‌ها از update و Companion استفاده می‌کنیم.
برای حذف داده‌ها از delete استفاده می‌کنیم.
برای درج داده‌ها از insert استفاده می‌کنیم.
Upsert به ما این امکان را می‌دهد که داده‌ها را درج یا به‌روزرسانی کنیم.
insertReturning داده‌های وارد شده را به ما برمی‌گرداند.
این‌ها اصول ابتدایی کار با Drift در فلاتر هستند که به شما امکان می‌دهند تا عملیات مختلف دیتابیس را مدیریت کنید.


//////////////////////////Expressions

//////////////////////////////