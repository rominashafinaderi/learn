خب، فرض کن تو یه رستوران کار می‌کنی و مردم میان سفارش غذا میدن. حالا دو تا راه داری:

هر دفعه از اول غذا درست کنی 🥵
یعنی هر وقت یکی اومد، بری مواد غذایی رو آماده کنی، غذا بپزی، بشقاب بیاری، همه چیزو از اول انجام بدی. این کار خیلی زمان و انرژی می‌بره!

یه سرآشپز حرفه‌ای (Provider) داشته باشی 👨‍🍳
این سرآشپز همیشه غذاها رو آماده و گرم نگه می‌داره. هر وقت کسی سفارش بده، سریع بهش یه بشقاب غذا میده، بدون اینکه دوباره از اول بپزه!

📌 Provider همون سرآشپزه توی فلاتره!
Provider اطلاعات رو یک‌بار دریافت می‌کنه و هر وقت نیاز داشتی، همون اطلاعات رو بهت میده. اینطوری دیگه لازم نیست هر بار از اول همه چیزو لود کنی و برنامه سریع‌تر کار می‌کنه! 🚀





چطوری مقدار Provider رو تغییر بدیم؟
برای این کار باید از StateProvider یا StateNotifierProvider استفاده کنیم.
✅ StateProvider برای تغییر مقدار ساده مثل List<String> مناسبه.
✅ StateNotifierProvider برای مدیریت وضعیت‌های پیچیده‌تر بهتره.

راه‌حل ۱: استفاده از StateProvider برای تغییر مقدار لیست
📁 در providers.dart اینو تغییر بده:

dart
Copy
Edit
import 'package:flutter_riverpod/flutter_riverpod.dart';

// تعریف StateProvider که مقدارش قابل تغییر باشه
final productsProvider = StateProvider<List<String>>((ref) {
  return ['a', 'b', 'c']; // مقدار اولیه
});
📁 در ProductScreen مقدار جدید اضافه کن:

dart
Copy
Edit
class ProductScreen extends ConsumerWidget {
  const ProductScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final products = ref.watch(productsProvider); // مقدار لیست رو می‌گیریم

    return Scaffold(
      appBar: AppBar(title: const Text('لیست محصولات')),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: products.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(products[index]),
                );
              },
            ),
          ),
          ElevatedButton(
            onPressed: () {
              ref.read(productsProvider.notifier).state = [...products, 'd'];
            },
            child: const Text('افزودن D'),
          ),
        ],
      ),
    );
  }
}
✅ الان وقتی دکمه رو بزنی، مقدار d به لیست اضافه می‌شه و صفحه اتوماتیک آپدیت می‌شه! 🎉

راه‌حل ۲: استفاده از StateNotifierProvider برای مدیریت لیست بهتر
📁 در providers.dart از StateNotifier استفاده کن:

dart
Copy
Edit
import 'package:flutter_riverpod/flutter_riverpod.dart';

// کلاس مدیریت لیست محصولات
class ProductsNotifier extends StateNotifier<List<String>> {
  ProductsNotifier() : super(['a', 'b', 'c']); // مقدار اولیه

  void addProduct(String product) {
    state = [...state, product]; // اضافه کردن مقدار جدید به لیست
  }
}

// تعریف Provider برای این نوتیفایر
final productsProvider = StateNotifierProvider<ProductsNotifier, List<String>>(
  (ref) => ProductsNotifier(),
);
📁 در ProductScreen دکمه برای اضافه کردن مقدار جدید بگذار:

dart
Copy
Edit
class ProductScreen extends ConsumerWidget {
  const ProductScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final products = ref.watch(productsProvider);

    return Scaffold(
      appBar: AppBar(title: const Text('لیست محصولات')),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: products.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(products[index]),
                );
              },
            ),
          ),
          ElevatedButton(
            onPressed: () {
              ref.read(productsProvider.notifier).addProduct('d');
            },
            child: const Text('افزودن D'),
          ),
        ],
      ),
    );
  }
}
✅ حالا هر بار دکمه رو بزنی، مقدار d به لیست اضافه می‌شه و صفحه بدون نیاز به setState() آپدیت می‌شه! 🚀🔥







